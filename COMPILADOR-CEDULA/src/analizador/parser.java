
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Feb 11 09:56:38 COT 2015
//----------------------------------------------------

package analizador;

import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Feb 11 09:56:38 COT 2015
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\006\000\002\002\003\000\002\002\004\000\002\003" +
    "\006\000\002\004\003\000\002\004\003\000\002\004\003" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\013\000\010\005\010\006\006\007\007\001\002\000" +
    "\004\010\013\001\002\000\004\002\012\001\002\000\004" +
    "\010\ufffd\001\002\000\004\010\ufffc\001\002\000\004\010" +
    "\ufffe\001\002\000\004\002\001\001\002\000\004\002\000" +
    "\001\002\000\004\004\014\001\002\000\004\010\015\001" +
    "\002\000\004\002\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\013\000\010\002\004\003\010\004\003\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public void report_error(String message, Object info) {
       	StringBuffer m = new StringBuffer("Error");
		System.out.println("Mensaje: "+message);
		System.out.println("info: "+info.toString());
java_cup.runtime.Symbol s=((java_cup.runtime.Symbol)info);
		if(info instanceof java_cup.runtime.Symbol) {

                    if(info.toString().equals("#0")){
                            //System.out.println("La sentencia esta incompleta");
                            m.append(": La sentencia esta incompleta");
                        }
                    if(info.toString().equals("#6")){
                        if(s.right<=4){
                            m.append(": El # no pertenece a las provincias de Loja,Oro,Pichincha '11,07,17'");
                        }
                        else{
                            if(s.right==11){
                            //System.out.println("Error caracter incorrecto '-'  ");
                            m.append(": Debe utilizar caracter '-'  ");
                        }else{
                               m.append(": Solo se permiten numeros");
}
}
                }

 		
			/* Comprueba si el numero de línea es mayor o igual que cero */
			if(s.left >= 0) {
				m.append(" en linea "+(s.left+1));
				/*Comprueba si el numero de columna es mayor o igual que cero */
				if (s.right >= 0)
					m.append(", y columna "+(s.right+1));
			}
		}
		m.append(" : "+message);
		System.err.println(m);
    }
    public void report_fatal_error(String message, Object info) {
       	report_error(message, info);
		System.exit(1);
    }

/* ­­­­­­­­­­­­­­ Métodos  ­­­­­­­­­­­ */

public Boolean validarDigitos(String numero){

    if(numero.length()!=7){
            System.out.println("Error el numero de digitos permitidos es 7 despues el codigo de provincia y antes del caracter");
                return false;
}
        else
   return true;

}

public Boolean validarDigitos2(String numero1){

    if(numero1.length()!=1){
            System.out.println("Error el numero de digitos permitidos despues del caracter es 1");
            return false;

}
        else

    return true;

}

public String validarCodigoProvincia(String CProvincia,String numero,String numero1){

    if(validarDigitos(numero)&&validarDigitos2(numero1)){

        if(CProvincia == "CODIGO LOJA"){
            System.out.println("CORRECTO");
            System.out.println("El numero de cedula pertenece a la provincia de Loja");}
            else if(CProvincia == "CODIGO PICHINCHA"){
               System.out.println("CORRECTO");
               System.out.println("El numero de cedula pertenece a la provincia de Pichincha");}
                else if(CProvincia == "CODIGO ORO"){
                     System.out.println("CORRECTO");
                     System.out.println("El numero de cedula pertenece a la provincia de el Oro");}
}
        
   return "Cedula incorrecta";
            
}



}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // DIGITOS ::= DIGITOSORO 
            {
              Object RESULT =null;
		RESULT="CODIGO ORO";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DIGITOS",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // DIGITOS ::= DIGITOSPICHINCHA 
            {
              Object RESULT =null;
		RESULT="CODIGO PICHINCHA";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DIGITOS",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // DIGITOS ::= DIGITOSLOJA 
            {
              Object RESULT =null;
		RESULT="CODIGO LOJA";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DIGITOS",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // LINEAS ::= DIGITOS NUMEROS CARACTER NUMEROS 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.validarCodigoProvincia(d.toString(),n1.toString(),n2.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LINEAS",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // programa ::= LINEAS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

